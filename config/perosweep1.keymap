#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

&sl {
    release-after-ms = <500>;
};

&caps_word {
    continue-list = <UNDERSCORE MINUS>;
};

/ {
    behaviors {
        lm: home_row_left {
            compatible = "zmk,behavior-hold-tap";
            label = "home_row_left";
            #binding-cells = <2>;
            // tapping-term-ms = <200>;
            // quick_tap_ms = <160>;
            tapping-term-ms = <280>;
            quick_tap_ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 32 33>;
            hold-trigger-on-release;
        };
        rm: home_row_right {
            compatible = "zmk,behavior-hold-tap";
            label = "home_row_right";
            #binding-cells = <2>;
            // tapping-term-ms = <200>;
            // quick_tap_ms = <160>;
            tapping-term-ms = <280>;
            quick_tap_ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31>;
            hold-trigger-on-release;
        };
    };

       macros {
            zed_em_kay: zed_em_kay {
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                    = <&macro_press &kp LSHFT>
                    , <&macro_tap &kp Z &kp M &kp K>
                    , <&macro_release &kp LSHFT>
                    ;
            };
            cpp_ptr: cpp_ptr {
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                    = <&macro_tap &kp MINUS &kp GREATER_THAN>
                    ;
            };
            LBR_D: LBR_D {
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                    = <&macro_press &kp LEFT_BRACKET>
                    , <&macro_tap &kp D>
                    , <&macro_release &kp LEFT_BRACKET>
                    ;
            };
            LBR_F: LBR_F {
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                    = <&macro_press &kp LEFT_BRACKET>
                    , <&macro_tap &kp F>
                    , <&macro_release &kp LEFT_BRACKET>
                    ;
            };
            LBR_T: LBR_T {
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                    = <&macro_press &kp LEFT_BRACKET>
                    , <&macro_tap &kp T>
                    , <&macro_release &kp LEFT_BRACKET>
                    ;
            };
            LBR_P: LBR_P {
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                    = <&macro_press &kp LEFT_BRACKET>
                    , <&macro_tap &kp P>
                    , <&macro_release &kp LEFT_BRACKET>
                    ;
            };
            RBR_D: RBR_D {
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                    = <&macro_press &kp RIGHT_BRACKET>
                    , <&macro_tap &kp D>
                    , <&macro_release &kp RIGHT_BRACKET>
                    ;
            };
            RBR_F: RBR_F {
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                    = <&macro_press &kp RIGHT_BRACKET>
                    , <&macro_tap &kp F>
                    , <&macro_release &kp RIGHT_BRACKET>
                    ;
            };
            RBR_T: RBR_T {
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                    = <&macro_press &kp RIGHT_BRACKET>
                    , <&macro_tap &kp T>
                    , <&macro_release &kp RIGHT_BRACKET>
                    ;
            };
            RBR_P: RBR_P {
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                    = <&macro_press &kp RIGHT_BRACKET>
                    , <&macro_tap &kp P>
                    , <&macro_release &kp RIGHT_BRACKET>
                    ;
            };
            XTHENV: XTHENV {
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                    = <&macro_tap &kp X &kp V>
                    ;
            };
        };    

        combos {
        compatible = "zmk,combos";
        combo_bspc {
        timeout-ms = <50>;
        key-positions = <8 9>;
        bindings = <&kp BACKSPACE>;
        };
        combo_tab {
        timeout-ms = <50>;
        key-positions = <0 1>;
        bindings = <&kp TAB>;
        };
        combo_mins {
        timeout-ms = <50>;
        key-positions = <22 23>;
        bindings = <&kp MINUS>;
        };
        combo_eql {
        timeout-ms = <50>;
        key-positions = <1 2>;
        bindings = <&kp EQUAL>;
        };
        combo_dquo {
        timeout-ms = <50>;
        key-positions = <7 8>;
        bindings = <&kp DOUBLE_QUOTES>;
        };
    };

    keymap {
        compatible = "zmk,keymap";
        
        macos {
        bindings = <

        &kp Q         &kp W       &kp E         &lt 3 R      &lt 4 T    &lt 4 Y    &kp U        &kp I         &kp O        &kp P
        &kp A         &lm LALT S  &lm LCTRL D   &lm LSHIFT F &lm LGUI G &rm RGUI H &rm RSHIFT J &rm RCTRL K   &rm RALT L   &kp SEMICOLON  
        &kp Z         &lm RALT X  &kp C         &kp V        &kp B      &kp N      &lt 3 M      &kp COMMA     &rm RALT DOT &kp SLASH        

                                          &lt 1 ENTER     &lt 2 ESC   &lt 2 SPACE  &lt 1 UNDER
        >;
        };

        macsym {
        bindings = <

        &kp EXCL     &kp AT     &kp LBRC   &kp RBRC  &kp TILDE    &cpp_ptr  &kp CARET &kp MINUS  &kp SQT  &kp LG(GRAVE)
        &kp LA(N3)   &kp DLLR   &kp LPAR   &kp RPAR  &kp PIPE     &kp LGUI  &kp EQUAL &kp UNDER  &kp DQT  &kp INS
        &kp PRCNT    &kp HASH   &kp LBKT   &kp RBKT  &kp AMPS     &kp GRAVE &kp BSLH  &kp HOME   &kp END  &none

                                            &none    &kp LBKT     &kp RBKT  &kp LG(GRAVE)
        >;
        };

        fkeys {
        bindings = <

        &kp F12 &kp F11      &kp F10       &kp F9         &kp LC(RIGHT)   &kp EQUAL    &kp N7        &kp N8       &kp N9      &kp STAR
        &kp F8  &lm LALT F7  &lm LCTRL F6  &lm LSHIFT F5  &kp LGUI        &rm LGUI DOT &rm RSHIFT N4 &rm RCTRL N5 &rm RALT N6 &kp PLUS
        &kp F4  &kp F3       &kp F2        &kp F1         &kp LC(LEFT)    &kp N0       &kp N1        &kp N2       &kp N3      &kp MINUS

                                           &none          &none      &caps_word  &kp DEL
        >;
        };

        arrows {
        bindings = <

        &none     &LBR_T    &LBR_D    &LBR_P    &LBR_F    &none     &none     &none     &none     &none
        &none     &RBR_T    &RBR_D    &RBR_P    &RBR_F    &kp LEFT  &kp DOWN  &kp UP    &kp RIGHT &none     
        &none     &XTHENV   &none     &none     &none     &none     &none     &XTHENV   &none     &none

                                      &kp UP    &kp DOWN  &none     &none  
        >;
        };

        bootloader_bt_access {
        bindings = <

        &mo 5       &none     &none     &none     &none     &none  &none  &none  &none  &mo 5
        &none       &none     &none     &none     &none     &none  &none  &none  &none  &none     
        &bootloader &none     &none     &none     &none     &none  &none  &none  &none  &bootloader

                                      &none     &none     &none     &none  
        >;
        };

        bluetooth {
        bindings = <

        &none         &none     &none         &none         &none            &none         &none         &none         &none        &none
        &none         &none     &none         &none         &bt BT_CLR       &bt BT_CLR    &none         &none         &none        &none     
        &out OUT_TOG  &none     &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0     &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &none        &out OUT_TOG

                                      &none     &none     &none     &none  
        >;
        };

        // // KEEP THIS! its the blank one we can copy
        // blank {
        // bindings = <

        // &none     &none     &none     &none     &none     &none     &none     &none     &none     &none
        // &none     &none     &none     &none     &none     &none     &none     &none     &none     &none     
        // &none     &none     &none     &none     &none     &none     &none     &none     &none     &none

        //                               &none     &none     &none     &none  
        // >;
        // };


    };
};
